#!/usr/bin/python3
"""
Unit tests for the add_integer function.
"""

import unittest
from add_integer import add_integer

class TestAddInteger(unittest.TestCase):
    """Test cases for the add_integer function."""

    def test_regular_addition(self):
        """Test regular addition of integers and floats."""
        self.assertEqual(add_integer(1, 2), 3)
        self.assertEqual(add_integer(-1, 5), 4)
        self.assertEqual(add_integer(1.7, 2.3), 3)
        self.assertEqual(add_integer(-1.9, 4.8), 2)

    def test_integer_casting(self):
        """Test that floats are correctly cast to integers."""
        self.assertEqual(add_integer(1.5, 2.5), 3)
        self.assertEqual(add_integer(-1.9, 5.1), 3)
        self.assertEqual(add_integer(0.9, 0.1), 0)

    def test_check_type(self):
        """Test that a TypeError is raised for non-integer/float inputs."""
        with self.assertRaises(TypeError):
            add_integer(None, 2)
        with self.assertRaises(TypeError):
            add_integer(1, "2")
        with self.assertRaises(TypeError):
            add_integer("1", 2)
        with self.assertRaises(TypeError):
            add_integer(1.5, [2])

    def test_missing_arguments(self):
        """Test that a TypeError is raised when arguments are missing."""
        with self.assertRaises(TypeError):
            add_integer()

    def test_missing_one_argument(self):
        """Test that the function correctly uses the default value for b."""
        self.assertEqual(add_integer(1), 99)
        self.assertEqual(add_integer(1.9), 99)

    def test_nan_input(self):
        """Test that a ValueError is raised for NaN input."""
        with self.assertRaises(ValueError):
            add_integer(float('nan'), 1)
        with self.assertRaises(ValueError):
            add_integer(1, float('nan'))
        with self.assertRaises(ValueError):
            add_integer(float('nan'), float('nan'))

    def test_float_overflow(self):
        """Test that the function handles float overflow."""
        with self.assertRaises(OverflowError):
            add_integer(float('inf'), 1)
        with self.assertRaises(OverflowError):
            add_integer(1, float('inf'))
        with self.assertRaises(OverflowError):
            add_integer(float('inf'), float('inf'))

if __name__ == "__main__":
    unittest.main()
